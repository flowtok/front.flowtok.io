type Query {
    users: [User]
    me: User!
    login(name: String!, password: String!): LoginResponse
    getCurrentUser(id: ID!): User
    tasks: [Task]
    generalSettings: GeneralSettings
    wallets: [PaymentMethod]
}

type LoginResponse{
    user: User
    token: String
}
type PayOutResponse {
    success: Boolean
    message: String
}
type AddWaletResponse {
    type: String
    value: String
}
type User {
    id: ID!
    name: String!
    email: String!
    userImage: String
    tagName: String
    verifiedTikTok: Boolean
    balance: Float!
    heldMoney: Float!
    refEarning: Float!
    refLink: String!
    refCount: Int!
    typeUser: Int!
    subjects: String
    telegramNotify: Boolean
    telegramId: String
    verifiedTelegram: Boolean
    telegramVerifyCode: String
    socialId: ID
    social: Social
    referrals: [RefUser]
    historyPayment: [HistoryPayment]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Social {
    id: ID!
    socialProvider: String!
    nickname: String!
    socialId: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

scalar DateTime

type RefUser {
    id: ID!
    refId: Int!
    byRef: Int!
    invited: ReferralInfo!
    invitedBy: ReferralInfo!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type ReferralInfo {
    id: ID!
    name: String!
    userImage: String!
    tagName: String!
    email: String!
}

type HistoryPayment {
    value: String!
    date: String!
    type: HistoryItemType!
}

enum UserType {
    Blogger
    Advertiser
}

enum HistoryItemType {
    dec
    inc
}
type HistoryItem {
    value: String!
    date: String!
    type: HistoryItemType!
}
type Task {
    id: ID!
    title: String!
    description: String!
    promo: String!
    price: Float!
    state: String!
}
input UserNameInput {
    name: String!
    id: ID!
}
input PayOutInput {
    type: WalletType!
    value: Float!
}
input AddWalletInput {
    type: WalletType!
    value: String!
}
enum WalletType {
    phone
    yandex
    card
    qiwi
    wmr
    wmz
}
type PaymentMethod  {
    value: String!
    type: WalletType!
}
type Mutation {
    updateUserName(input: UserNameInput): User
    payOut(input: PayOutInput): PayOutResponse
    addWallet(input: AddWalletInput): AddWaletResponse
    finishJoin(
        input: FinishJoin!
    ): User
}

type GeneralSettings {
    facebook: String
    telegram: String
    instagram: String
}

input FinishJoin {
    name: String
    subjects: [String!]!
    telegramNotify: Boolean!
    tagName: String!
}