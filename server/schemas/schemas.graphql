type Query {
    users: [User]
    user: User!
    login(name: String!, password: String!): LoginResponse
    getCurrentUser(id: ID!): User
    tasks: [Task]
    generalSettings: GeneralSettings
}

type LoginResponse{
    user: User
    token: String
}
type User {
    id: ID!
    password: String!
    name: String!
    userImage: String!
    tagName: String!
    age: Int!
    country: String!
    balance: String!
    avgViews: String!
    price: String!
    goodRate: Float!
    heldMoney: String!
    totalEarnings: String!
    refLink: String!
    refCount: Int!
    refEarnings: String!
    history: [HistoryItem]!
    type: UserType!
}

enum UserType {
    Blogger
    Advertiser
}

enum HistoryItemType {
    dec
    inc
}
type HistoryItem {
    value: String!
    date: String!
    type: HistoryItemType!
}
type Task {
    id: ID!
    title: String!
    description: String!
    promo: String!
    price: Float!
    state: String!
}
input UserNameInput {
    name: String!
    id: ID!
}
input PayOutInput {
    type: String!
    value: String!
}
type Mutation {
    updateUserName(input: UserNameInput): User
    payOut(input: PayOutInput): String
}
type GeneralSettings {
    facebook: String
    telegram: String
    instagram: String
}